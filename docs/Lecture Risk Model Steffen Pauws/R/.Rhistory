alligator = data.frame (
length = c (121.8,  93.9, 192.9,  78.4, 114.7, 117.0,  80.8,
109.1,  84.1,  91.1, 167.7, 111.3, 103.8, 105.9, 111.3 ),
weight = c (59112,  23091, 289873,  12672,  36213,  49871,  15020,
40831,  16271,  17278, 165578,  38070,  36213,  37691,
31799 )
)
plot(weight ~ length, data = alligator,
xlab = "Snout vent length (cm)",
ylab = "Weight (gr)",
main = "Alligators in Central Florida"
)
# use (natural) log scale to enforce linearity
plot (log(weight) ~ log(length), data = alligator,
xlab = "Snout vent length (cm) in natural log scale",
ylab = "Weight (gr) in natural log scale",
main = "Alligators in Central Florida"
)
fit <- lm (log(weight) ~ log(length), data = alligator)
abline (fit)
summary(fit)
bloodvalue <- c (0, 2:37, 40)
dead <- c (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0)
bloodtest <- vector()
for (i in c(1:length(bloodvalue))) {
bloodtest[i] <- if (bloodvalue[i] > 20) 1 else 0 }
plot (dead ~ sort (bloodvalue), xlab = "blood value",
ylab = "1-Y dead", type = "p" )
fit <- lm (dead ~ bloodvalue)
coefficients(fit)
abline(fit)
# fit a logistic regression on predictor blood test
fit <- glm (factor(dead) ~ bloodtest, family=binomial)
coefficients (fit)
exp ( coefficients ( fit ) )
lines (sort(bloodvalue), fit$fitted, type="l", col="red")
rm(list=ls())    # will remove ALL R objects: clean sheet
library (Hmisc, T)  # Harrellâs miscellaneous library with functions useful for data analysis
library (rms)       # accompanies Harrell's book Regression Modeling Strategies
library (graphics)
library (lattice)
# load the data set
filename = "C:/My Projects/0 Population Health/Shanghai/lectures/riskmodel/R/baseline.csv"
mydata  <-  read.csv(filename)
names (mydata)
# tell R that some vars are nominal, ordinals or dates
mydata$Dead.f <- factor (mydata$Dead, exclude = NULL, ordered = FALSE)
a <-  factor(mydata$Gender)
mydata$Gender <- factor(a, levels = c(0,1), labels =c("female","male"))
mydata$Source <- factor (mydata$Source, exclude = NULL, ordered = FALSE)
mydata$Country <- factor (mydata$Country, exclude = NULL, ordered = FALSE)
mydata$Motiva <- factor (mydata$Motiva, exclude = NULL, ordered = FALSE)
levels(mydata$Motiva) <- c("usual care", "telehealth")
mydata$QoL <- factor (mydata$QoL , ordered = TRUE)
# add BMI to the set
mydata$BMI <- mydata$Weight / ( 0.0001 * mydata$Height * mydata$Height)
# list of names of variables to analyse
vars <- c ( "Dead", "Gender", "Age", "Motiva", "Height", "Weight", "BMI",
"SysBP", "DiaBP", "Pulse", "NTproBNP", "Creatinine",
"Hemoglobin", "Glucose", "QoL" )
summary (mydata[,vars])
describe (mydata[,vars])
# plot a scatterplot on sorted values, histogram or a density
# and a boxplot on dead, gender, QoL, age, height
par (mfrow = c(3,3))
plot (sort (mydata$Dead.f), pch = ".", ylab="Frequency", xlab="1Y-dead" )
plot (sort (mydata$Gender), pch = ".", ylab="Frequency", xlab="gender" )
plot (sort (mydata$QoL) , pch = ".", ylab="Frequency", xlab="QoL score" )
plot ( sort (mydata$Age), pch = ".", ylab="age(yrs)", xlab="sorted case" )
plot (density(mydata$Age, na.rm=TRUE), xlab="age(yrs)", main="age")
boxplot ( mydata$Age ~ mydata$Dead, data = mydata, xlab="1Y-dead", ylab="age(yrs)", main="" )
plot (sort (mydata$Height), pch = ".", ylab="height(cm)", xlab="sorted case" )
plot (density(mydata$Height, na.rm=TRUE), xlab="height(cm)", main="weight")
boxplot ( mydata$Height ~ mydata$Dead, data = mydata, xlab="1Y-dead", ylab="height(cm)", main="" )
par (mfrow = c(3,3))
plot (sort (mydata$Weight), pch = ".", ylab="weight(gr)", xlab="sorted case" )
plot (density(mydata$Weight, na.rm=TRUE), xlab="weight(gr)", main="height")
boxplot ( mydata$Weight ~ mydata$Dead, data = mydata, xlab="1Y-dead", ylab="weight(gr)", main="" )
plot (sort (mydata$Pulse), pch = ".", ylab="HR(bpm)", xlab="sorted case" )
plot (density(mydata$Pulse, na.rm=TRUE), xlab="HR(bpm)", main="HR")
boxplot ( mydata$Pulse ~ mydata$Dead, data = mydata, xlab="1Y-dead", ylab="HR(bpm)", main="" )
plot (sort (mydata$SysBP), pch = ".", ylab="SBP(mmHg)", xlab="sorted case" )
plot (density(mydata$SysBP, na.rm=TRUE), xlab="SBP(mmHg)", main="SBP")
boxplot ( mydata$SysBP ~ mydata$Dead, data = mydata, xlab="1Y-dead", ylab="SBP(mmHg)", main="" )
par (mfrow = c(4,3))
plot (sort (log10(mydata$NTproBNP)), pch = ".", ylab="NT-proBNP(log pg/mL)", xlab="sorted case" )
plot (density(log10(mydata$NTproBNP), na.rm=TRUE), xlab="NT-proBNP(log pg/mL)", main="NT-proBNP")
boxplot ( log10(mydata$NTproBNP) ~ mydata$Dead , data = mydata, xlab="1Y-dead", ylab="NT-proBNP(log pg/mL)", main="" )
plot (sort (mydata$Creatinine), pch = ".", ylab="Cr(log mg/dL)", xlab="sorted case" )
plot (density(mydata$Creatinine, na.rm=TRUE), xlab="Cr(log mg/dL)", main="Creatinine")
boxplot ( mydata$Creatinine ~ mydata$Dead, data = mydata, xlab="1Y-dead", ylab="Cr(log mg/dL)", main="" )
plot (sort (mydata$Glucose), pch = ".", ylab="glucose(log mmol/L)", xlab="sorted case" )
plot (density(mydata$Glucose, na.rm=TRUE), xlab="glucose(log mmol/L)", main="Glucose")
boxplot ( mydata$Glucose ~ mydata$Dead, data = mydata, xlab="1Y-dead", ylab="glucose(log mmol/L)", main="" )
plot (sort (mydata$Hemoglobin), pch = ".", ylab="Hgb(log g/dL)", xlab="sorted case" )
plot (density(mydata$Hemoglobin, na.rm=TRUE), xlab="Hgb(log g/dL)", main="Hemoglobin")
boxplot ( mydata$Hemoglobin ~ mydata$Dead, data = mydata, xlab="1Y-dead", ylab="Hgb(log g/dL)", main="" )
par (mfrow = c(1,1))  # reset of window
# for age, getting min max, range and indices
range(mydata$Age, na.rm = TRUE)
min(mydata$Age, na.rm = TRUE)
max(mydata$Age, na.rm = TRUE)
which.min(mydata$Age)
which.max(mydata$Age)
# which patients are 'non-adults' or 'antique' and what is their age
idx <- which (mydata$Age < 21 | mydata$Age >= 100)
idx
sort ( mydata$Age[idx])
# consider zero and one year of age as a missing value or simple impute them
idx <- which (mydata$Age == 0 | mydata$Age == 1)
mydata$Age[idx] <- NA
mydata$Age[idx] <- median(mydata$Age, na.rm=TRUE)
# find patients below 10 kilograms, which all happen to be zero-weight
idx <- which (mydata$Weight < 10)
idx
sort (mydata$Weight[idx])
# consider missing or impute them with median weight
idx <- which (mydata$Weight == 0)
mydata$Weight[idx] <- NA
mydata$Weight[idx] <- median(mydata$Weight, na.rm=TRUE)
# find short people shorter than 1 m and tall people longer than 2 m,
# which all happen to be zero-length
idx <- which (mydata$Height < 100 | mydata$Height > 200)
idx
mydata$Height[idx]
# consider missing or impute them with median height
idx <- which (mydata$Height == 0)
mydata$Height[idx] <- NA
mydata$Height[idx] <- median(mydata$Height, na.rm=TRUE)
# find those with exceptional SysBP
idx <- which (mydata$SysBP < 40 | mydata$SysBP > 250)
sort (mydata$SysBP[idx])
# consider them missing or  impute them
mydata$SysBP[idx] <- NA
mydata$SysBP[idx] <- median(mydata$SysBP, na.rm=TRUE)
# find those with exceptional DiaBP
idx <- which (mydata$DiaBP < 30 | mydata$DiaBP > 250)
sort (mydata$DiaBP[idx])
# consider them missing or impute them
mydata$DiaBP[idx] <- NA
mydata$DiaBP[idx] <- median(mydata$DiaBP, na.rm=TRUE)
# find patients with extreme heart rates
idx <- which (mydata$Pulse < 35 | mydata$Pulse > 220)
sort (mydata$Pulse[idx])
# consider them missing or impute them
idx <- which (mydata$Pulse < 5 | mydata$Pulse > 220)
mydata$Pulse[idx] <- NA
mydata$Pulse[idx] <- median(mydata$Pulse, na.rm=TRUE)
# Cleveland dot charts
# A frequency dot plot for NAs
result  <- sapply(mydata, function(x)sum(is.na(x)))
dotplot (sort(result), main="Number of missing values", xlab = "Frequency")
# A proportional dot plot for NAs
num <- dim(mydata)[1]
result <- sapply (mydata, function(x) sum(is.na(x)) / num)
dotplot (sort (result), main="Proportion of missing values", xlab = "Proportion" )
vars <- c ("Dead", "Gender", "Age", "Motiva", "Height", "Weight", "SysBP", "Pulse", "NTproBNP", "Creatinine",
"Hemoglobin", "Glucose", "QoL" )
idx <- which( rowSums(is.na(mydata[,vars])) > 0)
CCdata <- mydata[-idx,]
# Add BMI to the data set
CCdata$BMI <- CCdata$Weight / ( 0.0001 * CCdata$Height * CCdata$Height)
summary(CCdata)
describe(CCdata)
fit <- glm( Dead ~ Age + Gender + (BMI >= 30.0) + SysBP + (Pulse >= 80.0) +
log10(NTproBNP) + (Creatinine >= 2.0) + (Hemoglobin < 12.0) +
(Glucose >= 8.0) + (QoL == 0) + Motiva, family=binomial("logit"), data = CCdata )
exp(coefficients (fit))
summary ( fit )
exp(coefficients (fit))
library(rms)     # accompanies FE Harrell's book Regression Modeling Strategies
library(caret)   # Classification And REgression Training for predictive modelling process
library(ROCR)    # estimating and plotting performance measures over a range of cutoffs
oldw <- getOption("warn")
options(warn = -1) # run in silent mode for demo purposes
avg_auc<-0
i<-0
while (i < 10) {
tc <- trainControl("cv", 10, savePred=T) # apply 10 fold cross validation
model <- train(  Dead ~ Age + Gender + (BMI >= 30.0) + SysBP + (Pulse >= 80.0) +
log10(NTproBNP) + (Creatinine >= 2.0) + (Hemoglobin < 12.0) +
(Glucose >= 8.0) + (QoL == 0) + Motiva,
data=CCdata, method="glm", trControl=tc, family=binomial)
pred <- prediction(model$pred$pred, model$pred$obs)
auc  <- performance(pred, "auc")
auc  <- unlist(slot(auc, "y.values"))
print ( paste ("AUC: ", round(100*auc,1), "%  "))
avg_auc<-avg_auc+auc
i<- i+1
}
avg_auc<- avg_auc/10
avg_auc
options(warn = oldw)  # set back original warning mode
cutoff<- 0.2425
#cutoff<- 0.1
#cutoff<- 0.5
prediction_cv <- cut(model$pred$pred, c(-Inf,cutoff,Inf), labels=c("no","yes"))
a<-table(prediction_cv,model$pred$obs)
perf <- performance(pred,"tpr","fpr")
all<-(a[1,1]+a[1,2]+a[2,1]+a[2,2])
tp<-a[2,2]
tn<-a[1,1]
fp<-a[2,1]
fn<-a[1,2]
ppv <- tp/(tp+fp)
npv <- tn/(tn+fn)
sens <- tp/(tp+fn)
spec <- tn/(tn+fp)
acc <- (tp+tn)/all
prevalence <- (fn+tp)/all
det_rate <- tp/all
det_pr <- (tp+fp)/all
e_acc <- (((tn+fp)*(tn+fn) / all) + ((fn+tp)*(fp+tp) / all)) / all
kappa <- (acc-e_acc)/(1-e_acc)
cat(" \n- cutoff ",cutoff,
"  \n\npred    TRUE     FALSE\nTRUE   ",tp, "   ",fp,
"\nFALSE   ",fn,"   ",tn,
"\n\nAUC              : ",round(auc,4),
"\nAccuracy         : ",round(acc,4),
"\nKappa            : ", round(kappa,4),
"\n\nSensitivity      : ", round(sens,4),
" \nSpecificity      : ", round(spec,4),
" \nPos Pred Value   : ", round(ppv,4),
" \nNeg Pred Value   : ", round(npv,4),
" \nPrevalence       : ", round(prevalence,4),
" \nDetection Rate   : ", round(det_rate,4),
" \nDetection Prev   : ", round(det_pr,4),
"\n\n'Positive Class' : TRUE")
## Plot ROC curve
roc0 <- roc(model$pred$obs, model$pred$pred)
plot(roc0, print.thres = c(0.1, 0.2425, 0.5), type = "S", col="green",lwd=2, main="ROC Curve",
print.thres.pattern = "%.3f (Spec = %.2f, \n Sens = %.2f)",
print.thres.cex = .8,     legacy.axes = TRUE)
require(pROC)
roc0 <- roc(model$pred$obs, model$pred$pred)
plot(roc0, print.thres = c(0.1, 0.2425, 0.5), type = "S", col="green",lwd=2, main="ROC Curve",
print.thres.pattern = "%.3f (Spec = %.2f, \n Sens = %.2f)",
print.thres.cex = .8,     legacy.axes = TRUE)
rm(list=ls())    # will remove ALL R objects: clean sheet
library(lattice) # required for side-by-side histogram plotting
## Read (selected) data
filename <- "C:/My Projects/0 Population Health/Shanghai/lectures/propensity/R/propensity_data.csv"
mydata <- read.csv(filename)
summary(mydata)
mydata$telehealth.label = ifelse(mydata$telehealth==1, "telehealth", "standard care")
histogram(~ age75 | telehealth.label, data=mydata)
library(lattice)
histogram(~ age75 | telehealth.label, data=mydata)
histogram(~ NYHA | telehealth.label, data=mydata)
